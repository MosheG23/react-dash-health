{"version":3,"sources":["components/Header/Header.jsx","components/Israel/IsraelCities.jsx","api/index.js","components/Israel/IsraelMap.jsx","components/Israel/IsraelTimeline.jsx","components/Israel/IsraelAges.jsx","components/Israel/IsraelCityOrder.jsx","components/Israel/Israel.jsx","components/Overview/CountryPicker.jsx","components/Overview/CountryInfo.jsx","components/Overview/Overview.jsx","components/World/Map/mapTypeData.js","components/World/Map/MapSelectors.jsx","components/World/Map/SecondMap.jsx","components/World/World.jsx","components/Footer/Footer.jsx","App.js","index.js","components/Overview/CountryInfo.module.css","components/World/Map/SecondMap.module.css","components/Israel/IsraelCities.module.css","config/dev.js","components/Overview/Overview.module.css","App.module.css","assets/data/countries.geojson","components/Israel/IsraelTimeline.module.css","components/World/World.module.css","components/World/Map/MapSelectors.module.css","assets/img/map_logo.png"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Header","props","classes","className","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Typography","IsraelCities","data","type","CircularProgress","sortedData","map","city","name","actualSick","sickCount","testLast7Days","verifiedLast7Days","positivePercent","toFixed","sort","a","b","parseFloat","Grid","container","justify","slice","item","testData","verifiedData","component","Card","s","md","cx","styles","card","infected","CardContent","start","end","duration","separator","Hidden","sDown","chartType","loader","options","title","is3D","rootProps","mdUp","fetchByCountryData","axios","get","fetchCountriesList","countriesList","country","id","countryInfo","_id","flag","fetchDataByCountry","countryID","dataByCountryURL","modifyData","population","active","activePerOneMillion","recovered","recoveredPerOneMillion","cases","todayCases","critical","criticalPerOneMillion","deaths","deathsPerOneMillion","todayDeaths","update","updated","todayRecovered","tests","fetchIsraelGovData","newData","fetchGlobalTimeline","getCountriesPolygons","countryName","polygonData","properties","ADMIN","countryPolygon","geometry","polygon","console","log","error","IsraelMap","IsraelTimeline","_","isEmpty","Skeleton","values","timeline","push","Date","date","chart","mdDown","hAxis","vAxis","IsraelAges","section","male","female","chartArea","width","isStacked","minValue","IsraelCityOrder","FormControl","NativeSelect","defaultValue","onChange","e","handleCityOrder","target","value","key","Israel","state","israelData","israelCityType","setState","fecthedIsraelData","this","direction","alignItems","xs","cityData","sickByAge","React","Component","CountryPicker","useState","fetchedCountryList","setCountryList","useEffect","API","fetchCountryList","handleCountryChange","CountryInfo","toUTCString","gutterBottom","Overview","countryList","currentCountryName","currentCountryData","fetchedCountry","fetchedData","App","cardsUpper","MapTypeData","text","icon","formControl","margin","minWidth","selectEmpty","marginTop","MapSelectors","handleMapTypeChange","map_selectors","index","FormHelperText","Marker","children","mapOptions","disableDefaultUI","zoomControl","SecondMap","mapRef","useRef","zoom","setZoom","bounds","setBounds","points","cluster","isoName","iso3","parseInt","casesPerOneMillion","testsPerOneMillion","coordinates","long","lat","useSuperCluster","radius","maxZoom","clusters","supercluster","style","height","src","logo","map__title","alt","bootstrapURLKeys","keys","googleMapAPIKey","defaultCenter","lng","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","current","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setMap","handleApiLoaded","nw","se","longitude","latitude","isCluster","pointCount","point_count","cluster_marker","length","onClick","expansionZoom","Math","min","getClusterExpansionZoom","panTo","sum","getTotalCluster","getLeaves","country_logo","World","mapType","mapData","fetchedByCountryData","fetchedGlobalTimeline","globalTimeline","Footer","href","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ad837df3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction Header(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            המרכז לקורונה ישראל\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    Grid,\r\n    CircularProgress,\r\n    Hidden\r\n} from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nimport styles from \"./IsraelCities.module.css\";\r\n\r\nfunction IsraelCities({ data, type }) {\r\n    if (!data) {\r\n        return (\r\n            <CircularProgress />\r\n        )\r\n    }\r\n    const newData = data.map((city) => ({\r\n        name: city.city,\r\n        actualSick: city.actualSick,\r\n        sickCount: city.sickCount,\r\n        testLast7Days: city.testLast7Days,\r\n        verifiedLast7Days: +city.verifiedLast7Days,\r\n        positivePercent: +((+city.verifiedLast7Days / city.testLast7Days) * 100).toFixed(2)\r\n    }));\r\n\r\n    const sortedData = newData.sort(function (a, b) {\r\n        return parseFloat(b[type]) - parseFloat(a[type]);\r\n    });\r\n    return (\r\n        <>\r\n            <Grid container spacing={1} justify=\"center\">\r\n                {sortedData.slice(0,6).map((item) => {\r\n                    const testData = item.testLast7Days;\r\n                    const verifiedData = +item.verifiedLast7Days;\r\n                    return(\r\n                    <Grid item component = { Card } s = { 12 } md = { 3 }\r\n                    className = {\r\n                        cx(styles.card, styles.infected)\r\n                    } >\r\n                        <CardContent>\r\n                            <Typography variant=\"h4\">\r\n                                {item.name}\r\n                            </Typography>\r\n                            <Typography variant=\"h7\">  מספר חולים פעילים - \r\n                                <CountUp start={0} end={item.actualSick} duration={1.5} separator=\",\" />\r\n                            </Typography>\r\n                            <br />\r\n                            <Typography variant=\"h7\">  מספר חולים סה\"כ - \r\n                                <CountUp start={0} end={item.sickCount} duration={1.5} separator=\",\" />\r\n                            </Typography>\r\n                            <br />\r\n                            <Typography variant=\"h7\">  כמות חולים בשבוע האחרון - \r\n                                <CountUp start={0} end={item.verifiedLast7Days} duration={1.5} separator=\",\" />\r\n                            </Typography>\r\n                            <br />\r\n                            <Hidden sDown>\r\n                                <Chart\r\n                                    chartType=\"PieChart\"\r\n                                    loader={<div>Loading Chart</div>}\r\n                                    data={[\r\n                                        ['תוצאה', 'כמות'],\r\n                                        [\"שלילי\", testData - verifiedData],\r\n                                        [\"חיובי\", verifiedData]\r\n                                    ]}\r\n                                    options={{\r\n                                        title: 'תוצאות בדיקות קורונה',\r\n                                        // Just add this option\r\n                                        is3D: true,\r\n                                    }}\r\n                                    rootProps={{ 'data-testid': '2' }}\r\n                                />\r\n                            </Hidden>\r\n                            <Hidden mdUp>\r\n                            <Typography variant=\"h6\">\r\n                                סה\"כ בדיקות\r\n                            </Typography>\r\n                            <Typography variant=\"h7\">  שלילי - \r\n                                <CountUp start={0} end={testData - verifiedData} duration={1} separator=\",\" />\r\n                            </Typography>\r\n                            <br />\r\n                            <Typography variant=\"h7\">  חיובי - \r\n                                <CountUp start={0} end={verifiedData} duration={1} separator=\",\" />\r\n                            </Typography>\r\n                            <br />\r\n                            <Typography variant=\"h7\">  סה\"כ - \r\n                                <CountUp start={0} end={testData} duration={1} separator=\",\" />\r\n                            </Typography>\r\n                            </Hidden>\r\n                        </CardContent>\r\n                    </Grid>)\r\n                })}\r\n            </Grid>\r\n        </> \r\n    )   \r\n}\r\n\r\nexport default IsraelCities;","import axios from \"axios\";\r\nimport polygonData from \"../assets/data/countries.geojson\";\r\nimport mosheJSON from \"../assets/data/hi.json\";\r\n\r\nexport const fetchByCountryData = async () => {\r\n    try {\r\n        const {data} = await axios.get(`https://disease.sh/v3/covid-19/countries`);\r\n        // const countryItems = (data.countryitems[0]);\r\n        // console.log((data));\r\n        return data;\r\n    } catch (error) {\r\n    }\r\n}\r\n\r\nexport const fetchCountriesList = async () => {\r\n    try {\r\n        const countryListURL = \"https://disease.sh/v3/covid-19/countries\";\r\n        const { data } = await axios.get(countryListURL);\r\n        const countriesList = data.map((country) => ({\r\n            name: country.country,\r\n            id: country.countryInfo._id,\r\n            flag: country.countryInfo.flag\r\n        }));\r\n        return countriesList;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDataByCountry = async (countryID) => {\r\n    try {\r\n        let dataByCountryURL = \"\";\r\n        if (countryID === {} || countryID === \"Global\") {\r\n            dataByCountryURL = `https://disease.sh/v3/covid-19/all`;\r\n        } else {\r\n            dataByCountryURL = `https://disease.sh/v3/covid-19/countries/${countryID}?yesterday=true`\r\n        }\r\n        const data = await axios.get(dataByCountryURL);\r\n        const modifyData = {\r\n            population: data.data.population,\r\n            active: data.data.active,\r\n            activePerOneMillion: data.data.activePerOneMillion,\r\n            recovered: data.data.recovered,\r\n            recoveredPerOneMillion: data.data.recoveredPerOneMillion,\r\n            cases: data.data.todayCases,\r\n            critical: data.data.critical,\r\n            criticalPerOneMillion: data.data.criticalPerOneMillion,\r\n            deaths: data.data.deaths, \r\n            deathsPerOneMillion: data.data.deathsPerOneMillion,\r\n            todayDeaths: data.data.todayDeaths,\r\n            update: data.data.updated,\r\n            todayRecovered: data.data.todayRecovered,\r\n            tests: data.data.tests\r\n        }\r\n        return modifyData;\r\n    } catch (error) {\r\n        return \"אין מידע על המדינה הנוכחית.\";\r\n    }\r\n}\r\n\r\nexport const fetchIsraelGovData = async () => {\r\n    try {\r\n        const israelFetchURL = `https://disease.sh/v3/covid-19/gov/Israel`;\r\n        const {data} = await axios.get(israelFetchURL);\r\n        const newData = data.data;\r\n        return newData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchGlobalTimeline = async () => {\r\n    try {\r\n        const globalTimelineURL = \"https://disease.sh/v3/covid-19/historical/all?lastdays=60\";\r\n        const { data } = await axios.get(globalTimelineURL);\r\n        return data;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const getCountriesPolygons = async  () => {\r\n    try {\r\n        // const data = await axios.get(\"../assets/data/countries.geojson\");\r\n        const newData = {\r\n            countryName: polygonData.properties.ADMIN,\r\n            countryPolygon: polygonData.geometry.polygon\r\n        };\r\n        console.log((newData));\r\n    } catch (error) {\r\n\r\n    }\r\n}","import React from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport _ from \"lodash\";\r\nimport { CircularProgress } from \"@material-ui/core\"\r\n\r\nimport Keys from \"../../config/dev\";\r\n\r\nfunction IsraelMap({ data }) {\r\n    if(!data.cityData){\r\n        return (\r\n            <CircularProgress />\r\n        )\r\n    }\r\n    let values = [{id: '0', label: 'עיר', type: 'string'},\r\n        {id: '1', label: 'חולים פעילים', type: 'number'}];    \r\n    data.cityData.map((item) => {\r\n        values.push([item.city, item.actualSick])\r\n    })\r\n\r\n    return (\r\n        <Chart\r\n            chartType=\"GeoChart\"\r\n            data={\r\n                values\r\n            }\r\n            options={{\r\n                region: 'IL',\r\n                displayMode: 'markers',\r\n                colorAxis: { colors: [ 'blue', 'red'] },\r\n            }}\r\n            mapsApiKey={Keys.googleMapAPIKey}\r\n            rootProps={{ 'data-testid': '2' }}\r\n            />\r\n    )\r\n}\r\n\r\nexport default IsraelMap;","import React from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport _ from \"lodash\";\r\nimport { Skeleton } from '@material-ui/lab';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport styles from \"./IsraelTimeline.module.css\"\r\n\r\nfunction IsraelTimeline({data}) {\r\n    if(_.isEmpty(data)){\r\n        return (\r\n            <>\r\n                <Skeleton />\r\n            </>\r\n        )\r\n    }\r\n\r\n    var values = [['תאריך', 'בדיקות חיוביות']];\r\n    data.timeline.map((item) =>{\r\n        values.push([new Date(item.date), item['newPositiveTests']])\r\n    })\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h4>לוח זמנים</h4>\r\n            <div className={styles.chart}>\r\n                <Hidden mdDown>\r\n                    <Chart\r\n                        chartType=\"Calendar\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={\r\n                            values\r\n                        }\r\n                        options={{\r\n                            title: 'חולים חדשים',\r\n                        }}\r\n                        rootProps={{ 'data-testid': '2' }}\r\n                    />\r\n                </Hidden>\r\n                <Hidden mdUp>\r\n                    <Chart\r\n                        chartType=\"LineChart\"\r\n                        loader={<div>Loading Chart</div>}\r\n                        data={\r\n                            values\r\n                        }\r\n                        options={{\r\n                            hAxis: {\r\n                            title: 'זמן',\r\n                            },\r\n                            vAxis: {\r\n                            title: 'כמות',\r\n                            },\r\n                        }}\r\n                        rootProps={{ 'data-testid': '1' }}\r\n                    />\r\n                </Hidden>\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default IsraelTimeline;","import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    Grid,\r\n    CircularProgress\r\n} from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nimport styles from \"./IsraelCities.module.css\";\r\n\r\nfunction IsraelAges({ data }) {\r\n    if (!data) {\r\n        return (\r\n            <CircularProgress />\r\n        )\r\n    }\r\n    const newData = [[\"טווח גילאים\", \"גברים\", \"נשים\"]];\r\n    data.map((item) => {\r\n        newData.push([item.section, item.male, item.female])\r\n    })\r\n    return (\r\n        <>\r\n            <h4>על פי גילאים</h4>\r\n            <Chart\r\n                chartType=\"BarChart\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={\r\n                    newData\r\n                }\r\n                options={{\r\n                    title: 'תחלואה על פי גילאים',\r\n                    chartArea: { width: '50%' },\r\n                    isStacked: true,\r\n                    hAxis: {\r\n                    title: 'סה\"כ חולים',\r\n                    minValue: 0,\r\n                    },\r\n                    vAxis: {\r\n                    title: 'גיל',\r\n                    },\r\n                }}\r\n                // For tests\r\n                rootProps={{ 'data-testid': '3' }}\r\n            />\r\n        </> \r\n    )   \r\n}\r\n\r\nexport default IsraelAges;","import React from 'react';\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nfunction IsraelCityOrder(props) {\r\n\r\n    return (\r\n        <div>\r\n            <FormControl>\r\n                <NativeSelect defaultValue = \"actualSick\"\r\n                onChange = {\r\n                    (e) => props.handleCityOrder(e.target.value)\r\n                } >\r\n                    <option key=\"actualSick\" value=\"actualSick\">כמות חולים פעילים</option>\r\n                    <option key=\"sickCount\" value=\"sickCount\">מספר חולים סך הכל</option>\r\n                    <option key=\"positivePercent\" value=\"positivePercent\">אחוז חיוביים</option>\r\n                    <option key=\"verifiedLast7Days\" value=\"verifiedLast7Days\">כמות חולים חדשים בשבוע האחרון</option>\r\n                    <option key=\"testLast7Days\" value=\"testLast7Days\">כמות בדיקות בחודש האחרון</option>\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IsraelCityOrder;","import React from \"react\";\r\nimport IsraelCities from \"./IsraelCities\";\r\n\r\nimport { CircularProgress, Grid } from \"@material-ui/core\";\r\n\r\nimport {fetchIsraelGovData} from \"../../api\";\r\nimport IsraelMap from \"./IsraelMap\";\r\nimport IsraelTimeline from \"./IsraelTimeline\";\r\nimport IsraelAges from \"./IsraelAges\";\r\nimport IsraelCityOrder from \"./IsraelCityOrder\";\r\n\r\nclass Israel extends React.Component {\r\n    state = {\r\n        israelData: {},\r\n        israelCityType: {}\r\n    }\r\n\r\n    handleCityOrder = async (type) => {\r\n        this.setState({\r\n            israelCityType: type\r\n        });\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const fecthedIsraelData = await fetchIsraelGovData();\r\n        this.setState({\r\n            israelData: fecthedIsraelData\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { israelData, israelCityType } = this.state;\r\n        console.log(israelCityType);\r\n        return (\r\n            <>\r\n                <h2>ישראל</h2>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <Grid item xs={8}>\r\n                        <IsraelTimeline data={israelData} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <h4>ערים ישראליות</h4>\r\n                        <IsraelCityOrder handleCityOrder={this.handleCityOrder} / >\r\n                        <IsraelCities data={israelData.cityData} type={ israelCityType } />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <IsraelAges data={israelData.sickByAge} />\r\n                    </Grid>\r\n                </Grid>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Israel;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport * as API from \"../../api\";\r\n\r\nimport styles from \"./CountryInfo.module.css\";\r\n\r\nfunction CountryPicker(props) {\r\n    const [fetchedCountryList, setCountryList] = useState([]);\r\n\r\n    useEffect (() => {\r\n        const fetchCountryList = async () => {\r\n            setCountryList(await API.fetchCountriesList());\r\n        }\r\n\r\n        fetchCountryList();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <FormControl>\r\n            <NativeSelect defaultValue=\"Global\" onChange={(e) => props.handleCountryChange(e.target.value)}>\r\n                <option key=\"Global\" value=\"Global\">Global</option>\r\n                {fetchedCountryList.map((item) => {\r\n                    return (\r\n                    <option key={item.id} value={item.value}>{item.name}</option>\r\n                    )\r\n                })};\r\n            </NativeSelect>\r\n        </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    Grid, CircularProgress\r\n} from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./CountryInfo.module.css\";\r\n\r\nfunction CountryInfo(props) {\r\n    if (!props.data.population) {\r\n        return <CircularProgress />;\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <span>עודכן לאחרונה: </span> {new Date(props.data.update).toUTCString()}\r\n            <Grid container spacing={1} justify=\"center\">\r\n                {/* Active  */}\r\n                <Grid item component = { Card } xs = { 12 } md = { 3 }\r\n                className = {\r\n                    cx(styles.card, styles.infected)\r\n                } >\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={props.data.active} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"primary\" gutterBottom>חולים פעילים</Typography>\r\n                        <Typography variant=\"h7\">\r\n                            <CountUp start={0} end={props.data.activePerOneMillion} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography variant = \"caption\"> (לפי מיליון תושבים)</Typography>\r\n                        <br />\r\n                        <Typography variant=\"h7\">\r\n                            <CountUp start={0} end={props.data.cases} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography variant = \"caption\"> (היום)</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* Recovered */}\r\n                <Grid item component = { Card } xs = { 12 } md = { 3 }\r\n                className = {\r\n                    cx(styles.card, styles.recovered)\r\n                } >\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={props.data.recovered} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"primary\" gutterBottom>מחלימים</Typography>\r\n                        <Typography variant=\"h7\">\r\n                            <CountUp start={0} end={props.data.recoveredPerOneMillion} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography variant = \"caption\"> (לפי מיליון תושבים)</Typography>\r\n                        <Typography variant=\"h7\">\r\n                        <br />\r\n                            <CountUp start={0} end={props.data.todayRecovered} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography variant = \"caption\"> (היום)</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* Deaths */}\r\n                <Grid item component = { Card } xs = { 12 } md = { 3 }\r\n                className = {\r\n                    cx(styles.card, styles.deaths)\r\n                } >\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={props.data.deaths} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"primary\" gutterBottom>מתים</Typography>\r\n                        <Typography variant=\"h7\">\r\n                            <CountUp start={0} end={props.data.deathsPerOneMillion} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography variant = \"caption\"> (לפי מיליון תושבים)</Typography>\r\n                        <br />\r\n                        <Typography variant=\"h7\">\r\n                            <CountUp start={0} end={props.data.todayDeaths} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography variant = \"caption\"> (היום)</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* Tests  */}\r\n                <Grid item component = { Card } xs = { 12 } md = { 3 }\r\n                className = {\r\n                    cx(styles.card, styles.infected)\r\n                } >\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={props.data.tests} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"primary\" gutterBottom>בדיקות</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* Population */}\r\n                <Grid item component = { Card } xs = { 12 } md = { 3 }\r\n                className = {\r\n                    cx(styles.card, styles.recovered)\r\n                } >\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={props.data.population} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"primary\" gutterBottom>תושבים</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                {/* Critical */}\r\n                <Grid item component = { Card } xs = { 12 } md = { 3 }\r\n                className = {\r\n                    cx(styles.card, styles.deaths)\r\n                } >\r\n                    <CardContent>\r\n                        <Typography variant=\"h4\">\r\n                            <CountUp start={0} end={props.data.critical} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"primary\" gutterBottom>במצב קשה</Typography>\r\n                        <Typography variant=\"h7\">\r\n                            <CountUp start={0} end={props.data.criticalPerOneMillion} duration={1.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography variant = \"caption\" > (לפי מיליון תושבים) </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryInfo;","import React from \"react\";\r\nimport styles from \"./Overview.module.css\";\r\nimport CountryPicker from \"./CountryPicker\";\r\nimport CountryInfo from \"./CountryInfo\";\r\nimport { fetchCountriesList, fetchDataByCountry } from \"../../api\";\r\n\r\nclass Overview extends React.Component {\r\n    state = {\r\n        countryList: {},\r\n        currentCountryName: \"Global\",\r\n        currentCountryData: {}\r\n    };\r\n\r\n    handleCountryChange = async (countryName) => {\r\n        const fetchedCountry = await fetchDataByCountry(countryName);\r\n        // fetch the data\r\n        this.setState({\r\n            currentCountryName: countryName,\r\n            currentCountryData: fetchedCountry\r\n        });\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const fetchedCountryList = await fetchCountriesList();\r\n        const fetchedData = await fetchDataByCountry(this.state.currentCountryName);\r\n        this.setState({\r\n            countryList: fetchedCountryList,\r\n            currentCountryData: fetchedData\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { countryList, currentCountryData } = this.state;\r\n\r\n        return (\r\n            <div className={styles.App}>\r\n                <div className={styles.container}>\r\n                    <div className={styles.cardsUpper}>\r\n                    <h2>סינון על פי מדינה</h2>\r\n                        <CountryPicker data={countryList} handleCountryChange={this.handleCountryChange} />\r\n                        <CountryInfo data={currentCountryData} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Overview;","import React from \"react\";\r\nimport { GiDeathSkull } from \"react-icons/gi\";\r\nimport { RiSurgicalMaskLine } from \"react-icons/ri\";\r\nimport { BsPeopleFill } from \"react-icons/bs\";\r\n\r\nexport const MapTypeData = [\r\n    {\r\n        value: \"deathsPerOneMillion\",\r\n        text: \"מתים\",\r\n        icon: <GiDeathSkull />\r\n    }, {\r\n        value: \"activePerOneMillion\",\r\n        text: \"מקרים פעילים\",\r\n        icon: <RiSurgicalMaskLine />\r\n    }, {\r\n        value: \"casesPerOneMillion\",\r\n        text: \"מקרים\", \r\n        icon: <BsPeopleFill />\r\n    }, {\r\n        value: \"testsPerOneMillion\",\r\n        text: \"בדיקות\",\r\n        icon: < BsPeopleFill / >\r\n    }\r\n]","import React, { useState } from 'react';\r\nimport { FormControl, NativeSelect, FormHelperText } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { MapTypeData } from \"./mapTypeData\";\r\n\r\nimport styles from \"./MapSelectors.module.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\n\r\nexport const MapSelectors = ({ handleMapTypeChange }) => {\r\n   const classes = useStyles();\r\n\r\n  return (\r\n    <div className={styles.map_selectors}>\r\n      <>\r\n      <h4>התאמה אישית</h4>\r\n        <FormControl className={classes.formControl}>\r\n        <NativeSelect\r\n          name=\"age\"\r\n          className={classes.selectEmpty}\r\n          defaultValue = \"deaths\"\r\n          onChange = {\r\n             (e) => handleMapTypeChange(e.target.value)\r\n           }\r\n        >\r\n          {MapTypeData.map((item, index) => {\r\n                    return (\r\n                    <option key={index} value={item.value}>\r\n                        {item.text}\r\n                    </option>\r\n                    );\r\n                })}\r\n        </NativeSelect>\r\n        <FormHelperText>לפי מיליון איש</FormHelperText>\r\n      </FormControl>\r\n      </>\r\n    </div>\r\n    )\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport keys from \"../../../config/dev\";\r\nimport {CircularProgress} from \"@material-ui/core\"\r\nimport _ from \"lodash\";\r\nimport useSuperCluster from \"use-supercluster\";\r\n\r\nimport logo from \"../../../assets/img/map_logo.png\"\r\n\r\nimport styles from \"./SecondMap.module.css\";\r\n\r\nconst Marker = ({children}) => children;\r\n\r\nconst mapOptions = {\r\n    disableDefaultUI: true,\r\n    zoomControl: true, \r\n}\r\n\r\nconst SecondMap = ({ data, type }) => {\r\n    const mapRef = useRef();\r\n    const [zoom, setZoom] = useState(1);\r\n    const [bounds, setBounds] = useState(null);\r\n\r\n    var points = []\r\n    if (!(_.isEmpty(data))) {\r\n        points = data.map(country => ({\r\n            type: \"Feature\",\r\n            properties: {\r\n                cluster: false,\r\n                countryName: country.country,\r\n                isoName: country.countryInfo.iso3,\r\n                activePerOneMillion: parseInt((country.activePerOneMillion)),\r\n                deathsPerOneMillion: parseInt((country.deathsPerOneMillion)),\r\n                casesPerOneMillion: parseInt((country.casesPerOneMillion)),\r\n                testsPerOneMillion: parseInt((country.testsPerOneMillion)),\r\n                flag: country.countryInfo.flag\r\n            },\r\n            geometry: {\r\n                type: \"Point\",\r\n                coordinates: [\r\n                    parseFloat(country.countryInfo.long),\r\n                    parseFloat(country.countryInfo.lat)\r\n                ]\r\n            }\r\n        }));\r\n    }\r\n    else {\r\n        data = [];\r\n    }\r\n\r\n    const { clusters, supercluster } = useSuperCluster({\r\n        points,\r\n        bounds,\r\n        zoom,\r\n        options: { radius: 125, maxZoom: 20 }\r\n    });\r\n    if(data === []) {\r\n        return (\r\n            <CircularProgress />\r\n        )\r\n    }\r\n\r\n    const getTotalCluster = (cluster) => {\r\n        let sum = 0;\r\n        cluster.map((country) => {\r\n            sum += parseInt(country.properties[type])\r\n        })\r\n        return sum;\r\n    }\r\n\r\n    const handleApiLoaded = (map, maps) => {\r\n        const triangleCoords = [\r\n                [[[12.45313691700008, 41.902751941000105],\r\n                [12.452714082000085, 41.903016213000029],\r\n                [12.452766936000103, 41.903439049000042],\r\n                [12.453031208000141, 41.90391473800014],\r\n                [12.453982588000144, 41.903861884],\r\n                [12.454035442000077, 41.902751941000105],\r\n                [12.45313691700008, 41.902751941000105]]]\r\n        ];\r\n\r\n        var bermudaTriangle = new maps.Polygon({\r\n            paths: triangleCoords,\r\n            strokeColor: \"#FF0000\",\r\n            strokeOpacity: 0.8,\r\n            strokeWeight: 2,\r\n            fillColor: \"#FF0000\",\r\n            fillOpacity: 0.55\r\n        });\r\n        bermudaTriangle.setMap(map);\r\n    }\r\n\r\n\r\n    return (\r\n      <div style={{ height: '100vh', width: '100%', position: \"relative\"}}>\r\n          <img src={logo} className={styles.map__title} alt=\"covid-19\"></img>\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: keys.googleMapAPIKey }}\r\n          defaultCenter={{\r\n                  lat: 31.4117257,\r\n                  lng: 35.0818155\r\n          }}\r\n          defaultZoom={1}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({map, maps}) => {\r\n              mapRef.current = map;\r\n              handleApiLoaded(map, maps);\r\n          }}\r\n          onChange={({ zoom, bounds }) => {\r\n              setZoom(zoom);\r\n              setBounds([\r\n                  bounds.nw.lng,\r\n                  bounds.se.lat,\r\n                  bounds.se.lng,\r\n                  bounds.nw.lat\r\n              ]);\r\n          }}\r\n          options={mapOptions}\r\n        >\r\n            \r\n\r\n        {clusters.map(cluster => {\r\n            const [longitude, latitude] = cluster.geometry.coordinates;\r\n            const { cluster: isCluster, point_count: pointCount } = cluster.properties;\r\n            if (isCluster) {\r\n                return (\r\n                    <Marker key={cluster.countryName} lat={latitude} lng={longitude}>\r\n                        <div className = {\r\n                            styles.cluster_marker\r\n                        } style={{\r\n                            width: `${50 - (pointCount / points.length) *30 }px`,\r\n                            height: `${50 - (pointCount / points.length) *30 }px`\r\n                        }}\r\n                        onClick ={() => {\r\n                            const expansionZoom = Math.min(\r\n                                supercluster.getClusterExpansionZoom(cluster.id),\r\n                                20\r\n                            );\r\n                            mapRef.current.setZoom(expansionZoom);\r\n                            mapRef.current.panTo({ lat: latitude, lng: longitude });\r\n                        }}\r\n                        >\r\n                            {getTotalCluster(supercluster.getLeaves(cluster.id, 150))}<br />\r\n                            ({pointCount})\r\n                        </div>\r\n                    </Marker>\r\n                )\r\n            }\r\n\r\n            return (\r\n                <Marker key = {\r\n                    cluster.properties.countryName\r\n                }\r\n                lat = {\r\n                    latitude\r\n                }\r\n                lng = {\r\n                    longitude\r\n                } >\r\n                    <button className={styles.country}>\r\n                        {cluster.properties[type]} <br />\r\n                        <img src={cluster.properties.flag} className={styles.country_logo} />\r\n                        {cluster.properties.isoName}\r\n                    </button>\r\n                </Marker>\r\n            )\r\n        })}\r\n\r\n        {/* {data.map(country => (\r\n                <Marker key={country.name} lat={country.lat} lng={country.long}>\r\n                    <div className={styles.cluster_marker}>\r\n                        {country.activeCases}\r\n                    </div>\r\n                </Marker>\r\n          ))} */}\r\n        </GoogleMapReact>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default SecondMap;\r\n","import React from \"react\";\r\nimport { fetchByCountryData, fetchGlobalTimeline } from \"../../api/\";\r\nimport styles from \"./World.module.css\";\r\nimport SecondMapSelector, { MapSelectors } from \"./Map/MapSelectors\";\r\n\r\nimport SecondMap from \"./Map/SecondMap\"\r\n\r\nclass World extends React.Component {\r\n    state = {\r\n        mapType: \"deathsPerOneMillion\",\r\n        mapData: {}, \r\n    }\r\n\r\n    handleMapTypeChange = async (type) => {\r\n        // fetch the data\r\n        this.setState({\r\n            mapType: type\r\n        });\r\n    };\r\n\r\n\r\n    async componentDidMount() {\r\n        const fetchedByCountryData = await fetchByCountryData();\r\n        const fetchedGlobalTimeline = await fetchGlobalTimeline();\r\n        this.setState({\r\n            mapData: fetchedByCountryData,\r\n            globalTimeline: fetchedGlobalTimeline\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { mapType, mapData } = this.state;\r\n        return (\r\n            <div className={styles.map}>\r\n              <h2>תצוגה עולמית</h2>\r\n              {/* <MapType handleMapTypeChange={this.handleMapTypeChange} /> */}\r\n              {/* <Grid container alignItems = \"flex-start\" >\r\n                    <Grid item xs={4} alignItems=\"flex-start\">\r\n                        <Grid container alignContent=\"center\" alignItems=\"flex-start\">\r\n                            <Grid item xs={12} md={6} >\r\n                                <Info data={mapData} type=\"deaths\" title=\"מספר מתים\" />\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6} >\r\n                                <Info data={mapData} type=\"totalActiveCases\" title=\"מקרים פעילים\" />\r\n                            </Grid>\r\n                            {/* <Hidden mdDown>\r\n                                <Grid item xs={12}>\r\n                                    <GlobalTimeline data={globalTimeline} type=\"cases\" />\r\n                                </Grid>\r\n                            </Hidden>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <Map data={mapData} type={mapType} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <GlobalTimeline data={globalTimeline} type=\"deaths\" />\r\n                    </Grid> \r\n              </Grid> */}\r\n              <MapSelectors handleMapTypeChange={this.handleMapTypeChange} />\r\n              <SecondMap data={mapData} type={mapType} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default World;","import React from 'react';\r\nimport styles from \"./Footer.module.css\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer>\r\n            <p> API: <a href=\"https://corona.lmao.ninja/docs/\" target=\"_blank\">corona.lmao.ninja</a></p>\r\n            <p>Author: Moshe Gotam</p>\r\n            <p><a href=\"mailto:mgotam@gmail.com\">mgotam@gmail.com</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport styles from './App.module.css';\n\nimport { Header, Overview, World, Israel, Footer } from \"./components\";\nimport { getCountriesPolygons } from \"./api/\";\n\nclass App extends React.Component {\n  render() {\n      getCountriesPolygons();\n      return (\n        <div className={styles.App}>\n          <Header />\n          <div className={styles.container}>\n            <Overview />\n            <World />\n            <Israel />\n          </div>\n          <Footer />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryInfo_container__163hQ\",\"card\":\"CountryInfo_card__CiAdm\",\"infected\":\"CountryInfo_infected__1dfmz\",\"recovered\":\"CountryInfo_recovered__2aaJN\",\"deaths\":\"CountryInfo_deaths__1Js80\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"country\":\"SecondMap_country__2SYln\",\"cluster_marker\":\"SecondMap_cluster_marker__2mX0d\",\"crime-marker\":\"SecondMap_crime-marker__1XJAi\",\"country_logo\":\"SecondMap_country_logo__16gYI\",\"map__title\":\"SecondMap_map__title__3aSaY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"IsraelCities_container__1pGKa\",\"card\":\"IsraelCities_card__3zugT\"};","module.exports = {\r\n    googleMapAPIKey: \"AIzaSyDwcW6ufY5v1kAnqOVA-ZYrs9FMgHdumMQ\"\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"Overview_App__kwkGZ\",\"container\":\"Overview_container__aCXf-\",\"cardsUpper\":\"Overview_cardsUpper__3Ih6F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__LnCvD\",\"container\":\"App_container__1JAmW\",\"cardsUpper\":\"App_cardsUpper__eI5Ff\"};","module.exports = __webpack_public_path__ + \"static/media/countries.797c19eb.geojson\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"IsraelTimeline_chart__39SpM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"World_map__37t96\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map_selectors\":\"MapSelectors_map_selectors__299op\"};","module.exports = __webpack_public_path__ + \"static/media/map_logo.12c13072.png\";"],"sourceRoot":""}